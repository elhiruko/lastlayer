#include "V{{vtop}}.h"
#include "lastlayer.h"
#include <cassert>

vluint64_t main_time = 0;

double sc_time_stamp() { return main_time; }

#ifdef __cplusplus
extern "C" {
#endif

LastLayerHandle LastLayerAlloc() {
    return new V{{vtop}};
}

void LastLayerDealloc(LastLayerHandle handle) {
    delete static_cast<V{{vtop}}*>(handle);
}

int LastLayerReadReg(LastLayerHandle handle, int hid, int sel) {
    assert( handle != nullptr );
    svSetScope(svGetScopeFromName("TOP.{{vtop}}.dpi"));
    return dpi_reg_read(hid, sel);
}

void LastLayerWriteReg(LastLayerHandle handle, int hid, int sel, int value) {
    assert( handle != nullptr );
    svSetScope(svGetScopeFromName("TOP.{{vtop}}.dpi"));
    dpi_reg_write(hid, sel, value);
}

int LastLayerReadMem(LastLayerHandle handle, int hid, int addr, int sel) {
    assert( handle != nullptr );
    svSetScope(svGetScopeFromName("TOP.{{vtop}}.dpi"));
    return dpi_mem_read(hid, addr, sel);
}

void LastLayerWriteMem(LastLayerHandle handle, int hid, int addr, int sel, int value) {
    assert( handle != nullptr );
    svSetScope(svGetScopeFromName("TOP.{{vtop}}.dpi"));
    dpi_mem_write(hid, addr, sel, value);
}

void LastLayerReset(LastLayerHandle handle, int n) {
    V{{vtop}}* top = static_cast<V{{vtop}}*>(handle);
    top->{{clock}} = 0;
    top->{{reset}} = 1;
    main_time = 0;
    while (!Verilated::gotFinish() && main_time < static_cast<vluint64_t>(n*10)) {
        if ((main_time % 10) == 1) {
            top->{{clock}} = 1;
        }
        if ((main_time % 10) == 6) {
            top->{{clock}} = 0;
        }
        top->eval();
        main_time++;
    }
    top->{{reset}} = 0;
}


void LastLayerRun(LastLayerHandle handle, int n) {
  V{{vtop}}* top = static_cast<V{{vtop}}*>(handle);
  top->{{clock}} = 0;
  main_time = 0;
  while (!Verilated::gotFinish() && main_time < static_cast<vluint64_t>(n*10)) {
      if ((main_time % 10) == 1) {
          top->{{clock}} = 1;
      }
      if ((main_time % 10) == 6) {
          top->{{clock}} = 0;
      }
      top->eval();
      main_time++;
  }
}

#ifdef __cplusplus
}
#endif
